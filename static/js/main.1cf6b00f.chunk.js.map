{"version":3,"sources":["logo.svg","CookieClicker.jsx","App.js","reportWebVitals.js","index.js"],"names":["CookieClicker","didMountRef","React","useRef","useEffect","current","setInterval","grandmasMakeCookies","useState","score","setScore","grandmas","setGrandmas","grandmasCost","setGrandmasCost","prevScore","className","onClick","prevGrandmas","prevCost","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LAAe,I,mBCEA,SAASA,IACtB,IAAMC,EAAcC,IAAMC,QAAO,GACjCD,IAAME,WAAU,WACTH,EAAYI,SACfC,aAAY,kBAAMC,MAAuB,QAM7C,MAA0BL,IAAMM,SAAS,GAAzC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCR,IAAMM,SAAS,GAA/C,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAwCV,IAAMM,SAAS,IAAvD,mBAAOK,EAAP,KAAqBC,EAArB,KAQMP,EAAsB,WAC1BG,GAAS,SAACK,GAAD,OAAeA,EAAY,EAAIJ,MAU1C,OACE,sBAAKK,UAAU,MAAf,UACE,gDADF,YAEYP,EAFZ,IAEmB,uBACjB,wBAAQQ,QAtBM,WAChBP,GAAS,SAACK,GAAD,OAAeA,EAAY,MAqBlC,2BACA,uBACA,yBAAQE,QAdO,WACbR,GAASI,IACXD,GAAY,SAACM,GAAD,OAAkBA,EAAe,KAC7CR,GAAS,SAACK,GAAD,OAAeA,EAAYF,KACpCC,GAAgB,SAACK,GAAD,OAAyB,IAAXA,OAU9B,kCACwBN,EADxB,eAGA,uBARF,qBASqBF,KC/BVS,MARf,WACE,OACE,qBAAKJ,UAAU,MAAf,SACE,cAAChB,EAAD,OCKSqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.1cf6b00f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\n\r\nexport default function CookieClicker() {\r\n  const didMountRef = React.useRef(false);\r\n  React.useEffect(() => {\r\n    if (!didMountRef.current) {\r\n      setInterval(() => grandmasMakeCookies(), 1000);\r\n    } else {\r\n      // runs every update\r\n    }\r\n  });\r\n\r\n  const [score, setScore] = React.useState(0);\r\n  const [grandmas, setGrandmas] = React.useState(0);\r\n  const [grandmasCost, setGrandmasCost] = React.useState(10);\r\n  const getCookie = () => {\r\n    setScore((prevScore) => prevScore + 1);\r\n  };\r\n\r\n  ////\r\n  //this.interval = setInterval(() => this.setState({ time: Date.now() }), 1000);\r\n\r\n  const grandmasMakeCookies = () => {\r\n    setScore((prevScore) => prevScore + 1 * grandmas);\r\n  };\r\n  const getGrandma = () => {\r\n    if (score >= grandmasCost) {\r\n      setGrandmas((prevGrandmas) => prevGrandmas + 1);\r\n      setScore((prevScore) => prevScore - grandmasCost);\r\n      setGrandmasCost((prevCost) => prevCost * 1.1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Cookie Clicker</h1>\r\n      cookies: {score} <br />\r\n      <button onClick={getCookie}>get a cookie </button>\r\n      <br />\r\n      <button onClick={getGrandma}>\r\n        buy a grandma (costs {grandmasCost} cookies)\r\n      </button>\r\n      <br />\r\n      Current grandmas: {grandmas}\r\n    </div>\r\n  );\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport CookieClicker from './CookieClicker';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CookieClicker></CookieClicker>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}